<?php
/**
 * @file
 *   OS2Web CPR-number filter module hooks and functions.
 */

/**
 * Implements hook_filter_info().
 */
function os2web_cpr_filter_filter_info() {
  $filters = array();	
  $filters['os2web_cpr_filter'] = array(
    'title' => t('OS2Web CPR-number filter'),
    'description' => t('Searching for CPR-numbers with/without modulus11 validation and replace matches with dummy value.'),
    'process callback' => '_os2web_cpr_filter_process',
    'settings callback' => '_os2web_cpr_filter_settings',
    'default settings' => array(
      'modulus11_check' => TRUE,
      'date_check' => TRUE,
      'replace_all_dash' => TRUE,
      'dummy_value' => 'XXXXXX-XXXX',	
    ),
  );
  return $filters;
}

/**
 * Filter settings form callback function.
 */
function _os2web_cpr_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['modulus11_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Validate found numbers with modulus11? If, enabled will only validated numbers be replaced with a dummy value.'),
    '#default_value' => $filter->settings['modulus11_check'],
  );
  $settings['date_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Validate date of found numbers if they fail modulus11 check? If, enabled will non modulus11 valid numbers have their date-part validated and numbers with a valid date will be replaced.'), 		
    '#default_value' => $filter->settings['date_check'],
  );  
  $settings['replace_all_dash'] = array(
    '#type' => 'checkbox',
    '#title' => t('Replace all numbers matching the format XXXXXX-XXXX with a dummy value.'),		
    '#default_value' => $filter->settings['replace_all_dash'],
  );  
  $settings['dummy_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Dummy value'),
    '#default_value' => $filter->settings['dummy_value'],
    '#maxlength' => 32,
    '#description' => t('The value we are replacing found CPR-numbers with.'),
  );
  return $settings;
}

/**
 * Filter process callback function.
 */
function _os2web_cpr_filter_process($text, $filter) {
  // Finding matches
  // To prevent false positives, match must not be preceded by a digit.
  // To prevent false positives, match must be followed by a word boundary.
  // Will allow a separator character (whitespace|slash|dot|dash) between date-month and month-year part.
  // Will allow a separation string (whitespace+slash|dot|dash+whitespace, or just whitespace) between date and serial part
  preg_match_all("/(?<!\d)\d{2}([\s\/\.\-]?)\d{2}\\1\d{2}(?:\s{0,2}[\/\.-]\s{0,2}|\s{0,2})\d{4}\b/", $text, $matches);

  // Looping through matches and replacing them
  $replace = array();

  foreach (current($matches) as $value) {
    // remove separator characaters (anything except digits)
    $stripped_value = preg_replace('/[^\d]/','',$value);
    // Replacing all numbers containing a dash
    if ($filter->settings['replace_all_dash'] && strpos($value, '-') !== FALSE) {
      $replace[$value] = $value;
    }
    // Modulus11 and date check
    else if((!$filter->settings['modulus11_check'] || _os2web_cpr_filter_modulus11($stripped_value))
      && (!$filter->settings['date_check'] || _os2web_cpr_filter_date_check($stripped_value)) )
    {
    $replace[$value] = $value;  
    }
  }

  // Replacing the CPR-numbers
  $text = str_replace($replace, $filter->settings['dummy_value'], $text);
  
  return $text;
}

/**
 * Validate a number against modulus 11.
 *
 * @param string $number
 *   The number being validated. Dash is stripped.
 * 
 * @return bool
 */
function _os2web_cpr_filter_modulus11($number) {
  $factor = '432765432';
  $number_arr = str_split($number);
  $factor_arr = str_split($factor);
  $control = end($number_arr);
  $sum = 0;
  for ($i = 0; $i < 9; $i++) {
    $sum += $number_arr[$i] * $factor_arr[$i];
  }
  $remainder = $sum % 11;
  $result = 11 - $remainder;
  /*
    If the product generated through the modulus 11 calculations is evenly divisible by 11 (no remainder),
    the resulting check digit is 11. In this case, the digit 0 is appended to the basic number.
  */
  $result = ($result == 11) ? $result % 11 : $result;
  return ($control == $result);
}

/**
 * Validate the date part (first 6 characters) of a number.
 *
 * @param string $number
 *   The number being validated. Dash is stripped.
 *
 * @return bool
 */
function _os2web_cpr_filter_date_check($number) {
  $day = substr($number, 0, 2);
  $month = substr($number, 2, 2);
  $year = substr($number, 4, 2);
  $year_check = substr($number, 6, 1);

  // Finding century based on number 7.
  switch ($year_check) {
    case 0:
    case 1:
    case 2:
    case 3:
      // 1900-1999
      $prefix_year = 19;
      break;
    case 4:
      // 2000-2036 or 1937-1999
      $prefix_year = ($year > 36) ? 19 : 20;
      break;
    case 5:
    case 6:
    case 7:
    case 8:
      // 2000-2057 or 1858-1899
      $prefix_year = ($year > 57) ? 18 : 20;
      break;
    case 9:
      // 2000-2036 or 1937-1999
      $prefix_year = ($year > 37) ? 19 : 20;
      break;
    default:
      return FALSE;
  }

  return checkdate($month, $day, sprintf("%d%d", $prefix_year, $year));
}
